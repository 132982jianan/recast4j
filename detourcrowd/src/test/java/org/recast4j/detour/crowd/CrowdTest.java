package org.recast4j.detour.crowd;

import org.junit.Assert;
import org.junit.Test;

public class CrowdTest extends AbstractCrowdTest {

	static final float[][] EXPECTED_A1Q0 = 
		{{22.606520f, 10.197294f, -45.918674f, 0.000000f, 0.000000f, 0.000000f},
			{22.322426f, 10.197294f, -45.771397f, -3.107285f, 0.000000f, 1.610831f},
			{21.754303f, 10.197294f, -45.476715f, -3.106887f, 0.000000f, 1.611599f},
			{21.133097f, 10.197294f, -45.154068f, -3.106033f, 0.000000f, 1.613245f},
			{20.512094f, 10.197294f, -44.831028f, -3.105014f, 0.000000f, 1.615205f},
			{19.891315f, 10.197294f, -44.507557f, -3.103898f, 0.000000f, 1.617350f},
			{19.270782f, 10.197294f, -44.183617f, -3.102670f, 0.000000f, 1.619704f},
			{18.650520f, 10.197294f, -43.859158f, -3.101315f, 0.000000f, 1.622296f},
			{18.030558f, 10.197294f, -43.534126f, -3.099816f, 0.000000f, 1.625158f},
			{17.410927f, 10.197294f, -43.208462f, -3.098152f, 0.000000f, 1.628329f},
			{16.791668f, 10.197294f, -42.882092f, -3.096297f, 0.000000f, 1.631854f},
			{16.172823f, 10.197294f, -42.554935f, -3.094221f, 0.000000f, 1.635786f},
			{15.554445f, 10.197294f, -42.226898f, -3.091888f, 0.000000f, 1.640191f},
			{14.936594f, 10.197294f, -41.897869f, -3.089255f, 0.000000f, 1.645145f},
			{14.319340f, 10.197294f, -41.567722f, -3.086269f, 0.000000f, 1.650741f},
			{13.702767f, 10.197294f, -41.236305f, -3.082862f, 0.000000f, 1.657094f},
			{13.086977f, 10.197294f, -40.903435f, -3.078954f, 0.000000f, 1.664345f},
			{12.472089f, 10.197294f, -40.568901f, -3.074442f, 0.000000f, 1.672665f},
			{11.858250f, 10.197294f, -40.232449f, -3.069196f, 0.000000f, 1.682271f},
			{11.245640f, 10.197294f, -39.893761f, -3.063048f, 0.000000f, 1.693439f},
			{10.634483f, 10.197294f, -39.552460f, -3.055783f, 0.000000f, 1.706514f},
			{10.025061f, 10.197294f, -39.208069f, -3.047112f, 0.000000f, 1.721948f},
			{9.417730f, 10.197294f, -38.860004f, -3.036654f, 0.000000f, 1.740326f},
			{8.812954f, 10.197294f, -38.507519f, -3.023880f, 0.000000f, 1.762429f},
			{8.211343f, 10.197294f, -38.149658f, -3.008055f, 0.000000f, 1.789302f},
			{7.613717f, 10.197294f, -37.785183f, -2.988129f, 0.000000f, 1.822385f},
			{7.021209f, 10.197294f, -37.412445f, -2.962540f, 0.000000f, 1.863695f},
			{6.435429f, 10.197294f, -37.029221f, -2.928901f, 0.000000f, 1.916126f},
			{5.858753f, 10.197294f, -36.632427f, -2.883380f, 0.000000f, 1.983965f},
			{5.294861f, 10.197294f, -36.217667f, -2.819461f, 0.000000f, 2.073798f},
			{4.749827f, 10.197294f, -35.778419f, -2.725170f, 0.000000f, 2.196236f},
			{4.234636f, 10.197294f, -35.304523f, -2.575954f, 0.000000f, 2.369486f},
			{3.772264f, 10.197294f, -34.778965f, -2.311863f, 0.000000f, 2.627792f},
			{3.428036f, 10.197294f, -34.169453f, -1.721137f, 0.000000f, 3.047571f},
			{3.033963f, 10.197294f, -33.590916f, -1.970364f, 0.000000f, 2.892692f},
			{2.656040f, 10.197294f, -33.001701f, -1.889616f, 0.000000f, 2.946074f},
			{2.307335f, 10.197294f, -32.394737f, -1.743529f, 0.000000f, 3.034816f},
			{2.021275f, 10.197294f, -31.755856f, -1.430300f, 0.000000f, 3.194408f},
			{1.935164f, 10.197294f, -31.061172f, -0.430555f, 0.000000f, 3.473417f},
			{1.847493f, 10.197294f, -30.366684f, -0.438351f, 0.000000f, 3.472441f},
			{1.943488f, 10.197294f, -29.673298f, 0.479975f, 0.000000f, 3.466933f},
			{2.170555f, 10.197294f, -29.011150f, 1.135336f, 0.000000f, 3.310742f},
			{2.415170f, 10.197294f, -28.355282f, 1.223072f, 0.000000f, 3.279344f},
			{2.677041f, 10.197294f, -27.706110f, 1.309357f, 0.000000f, 3.245857f},
			{2.938912f, 10.197294f, -27.056938f, 1.309357f, 0.000000f, 3.245857f},
			{3.200784f, 10.197294f, -26.407766f, 1.309357f, 0.000000f, 3.245856f},
			{3.462655f, 10.197294f, -25.758595f, 1.309357f, 0.000000f, 3.245857f},
			{3.724526f, 10.197294f, -25.109423f, 1.309357f, 0.000000f, 3.245857f},
			{3.986398f, 10.197294f, -24.460251f, 1.309357f, 0.000000f, 3.245857f},
			{4.248269f, 10.197294f, -23.811079f, 1.309357f, 0.000000f, 3.245856f},
			{4.510140f, 10.197294f, -23.161907f, 1.309357f, 0.000000f, 3.245856f},
			{4.772012f, 10.197294f, -22.512735f, 1.309357f, 0.000000f, 3.245856f},
			{5.033883f, 10.197294f, -21.863564f, 1.309358f, 0.000000f, 3.245856f},
			{5.295755f, 10.197294f, -21.214392f, 1.309358f, 0.000000f, 3.245856f},
			{5.557627f, 10.197294f, -20.565220f, 1.309358f, 0.000000f, 3.245856f},
			{5.819499f, 10.197294f, -19.916048f, 1.309358f, 0.000000f, 3.245856f},
			{6.081370f, 10.197294f, -19.266876f, 1.309358f, 0.000000f, 3.245856f},
			{6.322058f, 10.197294f, -18.670219f, 1.203439f, 0.000000f, 2.983284f},
			{6.443033f, 10.197294f, -18.370327f, 0.525096f, 0.000000f, 1.301696f},
			{6.447300f, 10.197294f, -18.359749f, 0.021334f, 0.000000f, 0.052888f},
			{6.450322f, 10.197294f, -18.352257f, 0.015112f, 0.000000f, 0.037462f},
			{6.452463f, 10.197294f, -18.346951f, 0.010705f, 0.000000f, 0.026536f},
			{6.453979f, 10.197294f, -18.343191f, 0.007583f, 0.000000f, 0.018798f},
			{6.453979f, 10.197294f, -18.343191f, 0.000000f, 0.000000f, 0.000000f},
	};
	
	@Test
	public void testAgent1Quality0TVTA() {
		int updateFlags = CrowdAgent.DT_CROWD_ANTICIPATE_TURNS | CrowdAgent.DT_CROWD_OPTIMIZE_VIS
				| CrowdAgent.DT_CROWD_OPTIMIZE_TOPO | CrowdAgent.DT_CROWD_OBSTACLE_AVOIDANCE;

		addAgentGrid(1, 0.4f, updateFlags, 0, startPoss[0]);
		for (CrowdAgent ag : crowd.getActiveAgents()) {
			crowd.requestMoveTarget(ag.getAgentIndex(), endRefs[0], endPoss[0]);
		}
		for (int i = 0; i < EXPECTED_A1Q0.length; i++) {
			for (CrowdAgent ag : crowd.getActiveAgents()) {
				Assert.assertEquals(EXPECTED_A1Q0[i][0], ag.npos[0], 0.001f);
				Assert.assertEquals(EXPECTED_A1Q0[i][1], ag.npos[1], 0.001f);
				Assert.assertEquals(EXPECTED_A1Q0[i][2], ag.npos[2], 0.001f);
				Assert.assertEquals(EXPECTED_A1Q0[i][3], ag.nvel[0], 0.001f);
				Assert.assertEquals(EXPECTED_A1Q0[i][4], ag.nvel[1], 0.001f);
				Assert.assertEquals(EXPECTED_A1Q0[i][5], ag.nvel[2], 0.001f);
			}
			dumpActiveAgents(i);
			crowd.update(1/5f, null);
		}
	}
/*
	@Test
	public void testAgent1Quality0TVT() {
		int updateFlags = CrowdAgent.DT_CROWD_ANTICIPATE_TURNS | CrowdAgent.DT_CROWD_OPTIMIZE_VIS
				| CrowdAgent.DT_CROWD_OPTIMIZE_TOPO;

		addAgentGrid(1, 0.4f, updateFlags, 0, startPoss[0]);
		for (CrowdAgent ag : crowd.getActiveAgents()) {
			crowd.requestMoveTarget(ag.getAgentIndex(), endRefs[0], endPoss[0]);
		}
		for (int i = 0; i < EXPECTED_A1Q0.length; i++) {
			for (CrowdAgent ag : crowd.getActiveAgents()) {
				Assert.assertEquals(EXPECTED_A1Q0[i][0], ag.npos[0], 0.001f);
				Assert.assertEquals(EXPECTED_A1Q0[i][1], ag.npos[1], 0.001f);
				Assert.assertEquals(EXPECTED_A1Q0[i][2], ag.npos[2], 0.001f);
				Assert.assertEquals(EXPECTED_A1Q0[i][3], ag.nvel[0], 0.001f);
				Assert.assertEquals(EXPECTED_A1Q0[i][4], ag.nvel[1], 0.001f);
				Assert.assertEquals(EXPECTED_A1Q0[i][5], ag.nvel[2], 0.001f);
			}
			dumpActiveAgents(i);
			crowd.update(1/5f, null);
		}
	}
*/
	private void dumpActiveAgents(int i) {
		System.out.println(crowd.getActiveAgents().size());
		for (CrowdAgent ag : crowd.getActiveAgents()) {
			System.out.println(ag.state + ", " + ag.targetState);
			System.out.println(ag.npos[0] + ", " + ag.npos[1] + ", " + ag.npos[2]);
			System.out.println(ag.nvel[0] + ", " + ag.nvel[1] + ", " + ag.nvel[2]);
		}
	}

}
